{"version":3,"file":"static/js/278.a84ab211.chunk.js","mappings":"mIACA,IACMA,EAAU,CAACC,QAAS,CAACC,cAAe,+NAY1C,IATA,SAAoBC,GAChB,OAAOC,MAAM,GAAD,OALC,+BAKD,YAAgBD,GAASH,GAASK,MAAM,SAAAC,GAChD,OAAIA,EAASC,GAGND,EAASE,OAFLC,QAAQC,OAAOJ,EAASK,OAGtC,GACJ,C,qFCmCD,UA3Ce,WACb,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOT,EAAP,KAAcU,EAAd,KAEA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,MAEFC,EAAAA,EAAAA,YAAU,WACK,KAAVb,IAEDc,EAAAA,EAAAA,GAAU,sBAAD,OAAuBd,IAC/BE,MAAK,YAAgB,IAAda,EAAa,EAAbA,QACNH,GAAS,OAAIG,IACS,IAAnBA,EAAQC,QAAcC,MAAM,0CAA2C,IAC3EC,MAAMC,QAAQC,IAEf,GAAE,CAACpB,IAYL,OACE,iCACA,kBAAMqB,SAZa,SAACC,GACpBA,EAAMC,iBACN,IAAMvB,EAAQsB,EAAME,OAAOC,SAASC,KAAKC,MAAMC,OAElC,KAAV5B,IAEHU,EAASV,GACTsB,EAAME,OAAOK,QACd,EAIC,WACE,kBAAOC,KAAK,OAAOC,KAAK,OAAOC,WAAS,KACxC,mBAAQD,KAAK,SAAb,uBAKDpB,IAAS,wBACPA,EAAMsB,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAN,OAAiB,yBAAa,SAAC,KAAD,UAAUA,KAAdD,EAA1B,QAKhB,C","sources":["components/services.js","pages/Movies/Movies.jsx"],"sourcesContent":["// https://api.themoviedb.org/3/movie/550?api_key=1eb19aee2b556e872aeb4d12f3e3d0ef\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst OPTIONS = {headers: {Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxZWIxOWFlZTJiNTU2ZTg3MmFlYjRkMTJmM2UzZDBlZiIsInN1YiI6IjY0NmY2NjQzMTdjNDQzMDBjMjI0OTMzZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nSQ1KLIUK97f2ypbV38GEeFR4HBt9RE_gR1cSa6SUjM'}}\n// const KEY = '1eb19aee2b556e872aeb4d12f3e3d0ef';\n\nfunction fetchFunc (query) {\n    return fetch(`${BASE_URL}/${query}`, OPTIONS).then( response => {\n        if(!response.ok) {\n            return Promise.reject(response.status)\n        }\n        return response.json(); \n    })\n}\n\nexport default fetchFunc;\n\n","import { useState, useEffect } from \"react\";\nimport fetchFunc from \"components/services\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  // const [isLoading, setIsLoading] = useState(false);\n  const [films, setFilms] = useState([]);\n  \nuseEffect(() => {\n  if(query !== '') {\n    // setIsLoading(true);\n    fetchFunc(`search/movie?query=${query}`)\n    .then(({results}) => {\n      setFilms([...results])\n      if(results.length === 0) alert(\"We've found nothing. Try another query!\")})\n    .catch(console.log)\n    // .finally(setIsLoading(false))\n  }}, [query])\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const query = event.target.elements.film.value.trim();\n  \n    if(query === '') return\n  \n    setQuery(query);\n    event.target.reset();\n  }\n\n  return (\n    <>\n    <form onSubmit={handleSubmit}>\n      <input name=\"film\" type=\"text\" autoFocus />\n      <button type=\"submit\">Search</button>\n    </form>\n\n    {/* {isLoading && <p>Loading...</p>} */}\n\n    {films && <ul>\n      {films.map(({id, title}) => <li key={id}><NavLink>{title}</NavLink></li>)}\n      </ul>}\n\n    </>\n  )\n}\n\nexport default Movies"],"names":["OPTIONS","headers","Authorization","query","fetch","then","response","ok","json","Promise","reject","status","useState","setQuery","films","setFilms","useEffect","fetchFunc","results","length","alert","catch","console","log","onSubmit","event","preventDefault","target","elements","film","value","trim","reset","name","type","autoFocus","map","id","title"],"sourceRoot":""}