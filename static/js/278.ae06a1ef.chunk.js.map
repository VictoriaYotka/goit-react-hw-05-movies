{"version":3,"file":"static/js/278.ae06a1ef.chunk.js","mappings":"mIAAA,IACMA,EAAU,CAACC,QAAS,CAACC,cAAe,+NAU1C,IARA,SAAoBC,GAChB,OAAOC,MAAM,GAAD,OAJC,+BAID,YAAgBD,GAASH,GAASK,MAAM,SAAAC,GAChD,OAAIA,EAASC,GAEND,EAASE,OAFQC,QAAQC,OAAOJ,EAASK,OAGnD,GACJ,C,8FCyCD,UA9Ce,WAAO,IAAD,EACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BC,EAAAA,EAAAA,UAAQ,UAACF,EAAaG,IAAI,iBAAlB,QAA+B,IAAjE,eAAOb,EAAP,KAAcc,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEnBC,EAAAA,EAAAA,YAAU,WACK,KAAVrB,IACDgB,GAAa,IACbM,EAAAA,EAAAA,GAAU,sBAAD,OAAuBtB,IAC/BE,MAAK,YAAgB,IAAdqB,EAAa,EAAbA,QACNL,GAAS,OAAIK,IACS,IAAnBA,EAAQC,QAAcC,MAAM,0CAA2C,IAC3EC,MAAMC,QAAQC,KACdC,SAAQ,kBAAMb,GAAa,EAAnB,IACT,GAAE,CAAChB,IAgBL,OACE,4BACE,kBAAM8B,SAbW,SAACC,GACpBA,EAAMC,iBACN,IAAMhC,EAAQ+B,EAAME,OAAOC,SAASC,KAAKC,MAAMC,OAElC,KAAVrC,IAEHW,EAAgB,CAAC2B,OAAQtC,IACzBc,EAASd,GACT+B,EAAME,OAAOM,QACd,EAIG,WACE,kBAAOC,KAAK,OAAOC,KAAK,OAAOC,WAAS,KACxC,mBAAQD,KAAK,SAAb,uBAED1B,IAAa,sCACbE,IAAS,wBACPA,EAAM0B,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAN,OAAiB,yBAAa,SAAC,KAAD,CAASC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAM7B,GAA7C,SAA0D0B,KAA9DD,EAA1B,QAIlB,C","sources":["components/services.js","pages/Movies/Movies.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst OPTIONS = {headers: {Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxZWIxOWFlZTJiNTU2ZTg3MmFlYjRkMTJmM2UzZDBlZiIsInN1YiI6IjY0NmY2NjQzMTdjNDQzMDBjMjI0OTMzZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nSQ1KLIUK97f2ypbV38GEeFR4HBt9RE_gR1cSa6SUjM'}}\n\nfunction fetchFunc (query) {\n    return fetch(`${BASE_URL}/${query}`, OPTIONS).then( response => {\n        if(!response.ok) return Promise.reject(response.status)\n        // console.log(response)\n        return response.json(); \n    })\n}\n\nexport default fetchFunc;\n\n","import { useState, useEffect } from \"react\";\nimport fetchFunc from \"components/services\";\nimport { NavLink, useLocation, useSearchParams } from \"react-router-dom\";\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('search') ?? '');\n  const [isLoading, setIsLoading] = useState(false);\n  const [films, setFilms] = useState([]);\n  const location = useLocation();\n  \nuseEffect(() => {\n  if(query !== '') {\n    setIsLoading(true);\n    fetchFunc(`search/movie?query=${query}`)\n    .then(({results}) => {\n      setFilms([...results])\n      if(results.length === 0) alert(\"We've found nothing. Try another query!\")})\n    .catch(console.log)\n    .finally(() => setIsLoading(false))\n  }}, [query])\n  //   const nextParams = query !== \"\" ? { search } : {};\n  //   setSearchParams(nextParams);\n  // };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const query = event.target.elements.film.value.trim();\n  \n    if(query === '') return\n  \n    setSearchParams({search: query})\n    setQuery(query);\n    event.target.reset();\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input name=\"film\" type=\"text\" autoFocus />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isLoading && <p>Loading...</p>}\n      {films && <ul>\n        {films.map(({id, title}) => <li key={id}><NavLink to={`/movies/${id}`} state={{ from: location }}>{title}</NavLink></li>)}\n        </ul>}\n    </div>\n  )\n}\n\nexport default Movies"],"names":["OPTIONS","headers","Authorization","query","fetch","then","response","ok","json","Promise","reject","status","useSearchParams","searchParams","setSearchParams","useState","get","setQuery","isLoading","setIsLoading","films","setFilms","location","useLocation","useEffect","fetchFunc","results","length","alert","catch","console","log","finally","onSubmit","event","preventDefault","target","elements","film","value","trim","search","reset","name","type","autoFocus","map","id","title","to","state","from"],"sourceRoot":""}